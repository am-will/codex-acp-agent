import type { Agent, InitializeRequest, InitializeResponse, NewSessionRequest, NewSessionResponse, PromptRequest, PromptResponse, CancelNotification } from "@zed-industries/agent-client-protocol";
import { AgentSideConnection } from "@zed-industries/agent-client-protocol";
import { Codex } from "@openai/codex-sdk";
import type { CodexAgentConfig } from "./config.js";
import type { Logger } from "./logger.js";
export declare class CodexAgent implements Agent {
    private readonly connection;
    private readonly codex;
    private readonly config;
    private readonly logger;
    private readonly sessions;
    private readonly slashCommands;
    constructor(connection: AgentSideConnection, codex: Codex, config: CodexAgentConfig, logger: Logger);
    initialize(params: InitializeRequest): Promise<InitializeResponse>;
    authenticate(): Promise<void>;
    newSession(params: NewSessionRequest): Promise<NewSessionResponse>;
    prompt(params: PromptRequest): Promise<PromptResponse>;
    cancel(params: CancelNotification): Promise<void>;
    private createThread;
    private requireSession;
    private advertiseAvailableCommands;
    private transformBlocksForSlashCommand;
    private handleEvent;
    private handleItemEvent;
    private processAgentMessage;
    private processReasoning;
    private processCommandExecution;
    private processFileChange;
    private processMcpToolCall;
    private processWebSearch;
    private processTodoList;
    private emitAgentMessage;
    private emitToolCall;
    private computeDelta;
    private textBlock;
    private textContent;
    private mapCommandStatus;
    private mapPatchStatus;
}
